<%#
 Copyright 2008 Steven Barth <steven@midlink.org>
 Copyright 2008-2015 Jo-Philipp Wich <jow@openwrt.org>
 Copyright 2017 Stan Grishin <stangri@melmac.net>
 Licensed to the public under the Apache License 2.0.
-%>

<%+header%>

<h2 name="content"><%:Advanced Reboot%></h2>
<br />

<%-
devices = {
  -- deviceName, boardName, partition1, partition2, offset, envVar1, envVar1Value1, envVar1Value2, envVar2, envVar2Value1, envVar2Value2
  {"Linksys EA3500", "linksys-audi", "mtd3", "mtd5", 32, "boot_part", 1, 2, "bootcmd", "run nandboot", "run altnandboot"},
  {"Linksys E4200v2/EA4500", "linksys-viper", "mtd3", "mtd5", 32, "boot_part", 1, 2, "bootcmd", "run nandboot", "run altnandboot"},
  {"Linksys EA8500", "ea8500", "mtd13", "mtd15", 32, "boot_part", 1, 2},
--  {"Linksys EA9500", "linksys-panamera", "mtd3", "mtd6", 28, "boot_part", 1, 2},
  {"Linksys WRT1200AC", "linksys-caiman", "mtd4", "mtd6", 32, "boot_part", 1, 2, "bootcmd", "run nandboot", "run altnandboot"},
  {"Linksys WRT1900AC", "linksys-mamba", "mtd4", "mtd6", 32, "boot_part", 1, 2, "bootcmd", "run nandboot", "run altnandboot"},
  {"Linksys WRT1900ACv2", "linksys-cobra", "mtd4", "mtd6", 32, "boot_part", 1, 2, "bootcmd", "run nandboot", "run altnandboot"},
  {"Linksys WRT1900ACS", "linksys-shelby", "mtd4", "mtd6", 32, "boot_part", 1, 2, "bootcmd", "run nandboot", "run altnandboot"},
  {"Linksys WRT3200ACM", "linksys-rango", "mtd5", "mtd7", 32, "boot_part", 1, 2, "bootcmd", "run nandboot", "run altnandboot"},
  {"Linksys WRT32X", "linksys-venom", "mtd5", "mtd7", nil, "boot_part", 1, 2, "bootcmd", "run nandboot", "run altnandboot"},
  {"ZyXEL NBG6817","nbg6817","mmcblk0p4","mmcblk0p7", 32, nil, 255, 1}
}

rom_board_name = luci.util.trim(luci.sys.exec("cat /tmp/sysinfo/board_name"))
for i=1, #devices do
  device_board_name = devices[i][2]:gsub('%p','')
  if rom_board_name and rom_board_name:gsub('%p',''):match(device_board_name) then
    device_name = devices[i][1]
    partition_one_mtd = devices[i][3] or nil
    partition_two_mtd = devices[i][4] or nil
    partition_skip = devices[i][5] or nil
    boot_envvar1 = devices[i][6] or nil
    boot_envvar1_partition_one = tonumber(devices[i][7]) or nil
    boot_envvar1_partition_two = tonumber(devices[i][8]) or nil
    boot_envvar2 = devices[i][9] or nil
    boot_envvar2_partition_one = devices[i][10] or nil
    boot_envvar2_partition_two = devices[i][11] or nil
    if partition_one_mtd and partition_skip then
      partition_one_label = luci.util.trim(luci.sys.exec("dd if=/dev/" .. partition_one_mtd .. " bs=1 skip=" .. partition_skip .. " count=25" .. "  2>/dev/null"))
      n, partition_one_version = string.match(partition_one_label, '(Linux)-([%d|.]+)')
    end
    if partition_two_mtd and partition_skip then
      partition_two_label = luci.util.trim(luci.sys.exec("dd if=/dev/" .. partition_two_mtd .. " bs=1 skip=" .. partition_skip .. " count=25" .. "  2>/dev/null"))
      n, partition_two_version = string.match(partition_two_label, '(Linux)-([%d|.]+)')
    end
    if partition_one_label and string.find(partition_one_label, "LEDE") then partition_one_os = "LEDE" end
    if partition_one_label and string.find(partition_one_label, "OpenWrt") then partition_one_os = "OpenWrt" end
    if partition_one_label and string.find(partition_one_label, "Linksys") then partition_one_os = "Linksys" end
    if partition_two_label and string.find(partition_two_label, "LEDE") then partition_two_os = "LEDE" end
    if partition_two_label and string.find(partition_two_label, "OpenWrt") then partition_two_os = "OpenWrt" end
    if partition_two_label and string.find(partition_two_label, "Linksys") then partition_two_os = "Linksys" end
    if device_name and device_name == "ZyXEL NBG6817" then
      if not partition_one_os then partition_one_os = "ZyXEL" end
      if not partition_two_os then partition_two_os = "ZyXEL" end
    end
    if device_name and device_name == "Linksys WRT32X" then
      if not partition_one_os then partition_one_os = "Unknown/Compressed" end
      if not partition_two_os then partition_two_os = "Unknown/Compressed" end
    end
    if not partition_one_os then partition_one_os = "Unknown" end
    if not partition_two_os then partition_two_os = "Unknown" end
    if partition_one_os and partition_one_version then partition_one_os = partition_one_os .. " (Linux " .. partition_one_version .. ")" end
    if partition_two_os and partition_two_version then partition_two_os = partition_two_os .. " (Linux " .. partition_two_version .. ")" end

    if device_name and device_name == "ZyXEL NBG6817" then
      if not zyxelFlagPartition then zyxelFlagPartition = luci.util.trim(luci.sys.exec("source /lib/functions.sh; find_mtd_part 0:DUAL_FLAG")) end
      if not zyxelFlagPartition then
        errorMessage = errorMessage .. luci.i18n.translate("Unable to find Dual Boot Flag Partition." .. " ")
        luci.util.perror(luci.i18n.translate("Unable to find Dual Boot Flag Partition."))
      else
        current_partition = tonumber(luci.sys.exec("dd if=" .. zyxelFlagPartition .. " bs=1 count=1 2>/dev/null | hexdump -n 1 -e '1/1 \"%d\"'"))
      end
    else
      if nixio.fs.access("/usr/sbin/fw_printenv") and nixio.fs.access("/usr/sbin/fw_setenv") then
        current_partition = tonumber(luci.util.trim(luci.sys.exec("/usr/sbin/fw_printenv -n " .. boot_envvar1)))
      end
    end
    other_partition = current_partition == boot_envvar1_partition_two and boot_envvar1_partition_one or boot_envvar1_partition_two
  end
end
-%>

<%- local c = require("luci.model.uci").cursor():changes(); if c and next(c) then -%>
	<p class="alert-message warning"><%:Warning: There are unsaved changes that will get lost on reboot!%></p>
<%- end -%>

<%- if errorMessage and errorMessage ~= "" then -%>
	<p class="alert-message warning"><%:ERROR: %><%=errorMessage%></p>
<%- end -%>

<%- if device_name then -%>
<fieldset class="cbi-section">
  <legend><%=device_name%><%: Partitions%></legend>
  <table class="cbi-section-table" id="partitions">
    <tr class="cbi-section-table-titles">
      <th class="cbi-section-table-cell"><%:Partition%></th>
      <th class="cbi-section-table-cell"><%:Status%></th>
      <th class="cbi-section-table-cell"><%:Firmware/OS (Kernel)%></th>
      <th class="cbi-section-table-cell"><%:Action%></th>
    </tr>
    <tr class="cbi-section-table-row">
      <td>
        <%=string.format("%X", boot_envvar1_partition_one)%>
      </td>
      <td>
        <%- if boot_envvar1_partition_one == current_partition then -%><%:Current%><%- else -%><%:Alternative%><%- end -%>
      </td>
      <td>
        <%=partition_one_os%>
      </td>
      <td>
        <%- if boot_envvar1_partition_one == current_partition then -%>
        <form method="post" action="<%=url('admin/system/advanced_reboot/reboot')%>">
          <input type="hidden" name="token" value="<%=token%>" />
          <input id="reboot-button" type="submit" class="cbi-button cbi-button-apply" value="<%:Reboot to current partition%>" />
        </form>
      <%- else -%>
      <form method="post" action="<%=url('admin/system/advanced_reboot/alternative_reboot')%>">
        <input type="hidden" name="token" value="<%=token%>" />
        <input id="altreboot-button" type="submit" class="cbi-button cbi-button-apply" value="<%:Reboot to alternative partition...%>" />
      </form>
        <%- end -%>
      </td>
    </tr>
    <tr class="cbi-section-table-row">
      <td>
        <%=string.format("%X", boot_envvar1_partition_two)%>
      </td>
      <td>
        <%- if boot_envvar1_partition_two == current_partition then -%><%:Current%><%- else -%><%:Alternative%><%- end -%>
      </td>
      <td>
        <%=partition_two_os%>
      </td>
      <td>
        <%- if boot_envvar1_partition_two == current_partition then -%>
          <form method="post" action="<%=url('admin/system/advanced_reboot/reboot')%>">
          	<input type="hidden" name="token" value="<%=token%>" />
            <input id="reboot-button" type="submit" class="cbi-button cbi-button-apply" value="<%:Reboot to current partition%>" />
          </form>
        <%- else -%>
        <form method="post" action="<%=url('admin/system/advanced_reboot/alternative_reboot')%>">
          <input type="hidden" name="token" value="<%=token%>" />
          <input id="altreboot-button" type="submit" class="cbi-button cbi-button-apply" value="<%:Reboot to alternative partition...%>" />
        </form>
        <%- end -%>
      </td>
    </tr>
  </table>
</fieldset>
<%- else -%>
  <%- if rom_board_name then -%>
    <p class="alert-message warning"><%:Warning: Device (%><%=rom_board_name%><%:) is unknown or isn't a dual-partition device!%></p>
  <%- else -%>
    <p class="alert-message warning"><%:Warning: Unable to obtain device information!%></p>
  <%- end -%>
<%- end -%>

<hr />

<%- if nixio.fs.access("/sbin/poweroff") then -%>
<form method="post" action="<%=url('admin/system/advanced_reboot/power_off')%>">
	<input type="hidden" name="token" value="<%=token%>" />
  <input id="poweroff-button" type="submit" class="cbi-button cbi-button-apply" value="<%:Perform power off...%>" />
</form>
<%- else -%>
  <p class="alert-message warning"><%:Warning: This system does not support powering off!%></p>
<%- end -%>

<%+footer%>
